#!/usr/bin/env python2

# Copyright (c) 2012 Jeppe Ledet-Pedersen <jlp@satlab.org>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

from __future__ import print_function

import sys
import time
import os.path
import argparse
import bluebox

subcommands = {}
def subcommand(*args, **kwargs):
	def _decorator(func):
		nargs = list(args)
		help = nargs[0]
		nargs[0] = func.__name__
		kwargs["help"] = help
		_option = (nargs, kwargs)
		if not subcommands.has_key(func.__name__):
			subcommands[func.__name__] = {}
		subcommands[func.__name__]["sub"] = _option
		subcommands[func.__name__]["func"] = func
		if not subcommands[func.__name__].has_key("args"):
			subcommands[func.__name__]["args"] = []
		return func
	return _decorator

def argument(*args, **kwargs):
	def _decorator(func):
		_option = (args, kwargs)
		if not subcommands.has_key(func.__name__):
			subcommands[func.__name__] = {}
		if not subcommands[func.__name__].has_key("args"):
			subcommands[func.__name__]["args"] = []
		subcommands[func.__name__]["args"].append(_option)
		return func
	return _decorator
	
@subcommand("boot device into bootloader")
def bootloader(args, bb):
	bb.bootloader()

@subcommand("show RF silicon revision")
def version(args, bb):
	ver = bb.version()
	print(hex(ver))

@subcommand("show current RSSI reading in dBm")
def rssi(args, bb):
	rssi = bb.rssi()
	print("{0} dBm".format(rssi))

@subcommand("continuously show RSSI reading")
def signal(args, bb):
	minimum = -130
	maximum = -47
	width = 40

	while True:
		try:
			rssi = bb.rssi()
			if rssi < minimum:
				rssi = minimum
			if rssi > maximum:
				rssi = maximum

			progress = (rssi+abs(minimum))*width/(maximum+abs(minimum))

			bar = "[" + progress * "#" + (width-progress) * " " + "]"

			sys.stdout.write("\r{0} {1} dBm ".format(bar, rssi))
			sys.stdout.flush()
			time.sleep(0.1)
		except KeyboardInterrupt:
			print()
			sys.exit(0)
		except Exception as e:
			print(e)
			break

@subcommand("receive packets and print to screen")
def receive(args, bb):
	last = time.time()
	while True:
		data = bb.receive()
		if data is None:
			break
		print("Recv ({0}) {1:.2f}s '{2}'".format(len(data), time.time() - last, ''.join(["{0:02x}".format(ord(x)) for x in data])))
		last = time.time()

@subcommand("transmit packet data")
@argument('packet', help="packet hex string to transmit")
@argument('-r', '--wait-reply', dest="wait_reply", help="wait for reply", action='store_true', default=False)
def transmit(args, bb):
	bytes = args.packet.decode("hex")
	bb.transmit(bytes)
	if args.wait_reply:
		data = bb.receive()
		print("Recv ({0}) '{1}'".format(len(data), ''.join(["{0:02x}".format(ord(x)) for x in data])))

@subcommand("put device in test mode")
@argument('mode', help="testmode type", choices=("carrier", "high", "low", "pn9", "1010", "syncword", "off"))
@argument('-l', '--limit', type=int, metavar="seconds", help="stop after limit seconds")
def testmode(args, bb):
	if args.mode == "carrier":
		bb.testmode(bb.TESTMODE_OFF)
		bb.tx_mode()
	elif args.mode == "high":
		bb.testmode(bb.TESTMODE_PATTERN_HIGH)
		bb.tx_mode()
	elif args.mode == "low":
		bb.testmode(bb.TESTMODE_PATTERN_LOW)
		bb.tx_mode()
	elif args.mode == "pn9":
		bb.testmode(bb.TESTMODE_PATTERN_PN9)
		bb.tx_mode()
	elif args.mode == "1010":
		bb.testmode(bb.TESTMODE_PATTERN_1010)
		bb.tx_mode()
	elif args.mode == "syncword":
		bb.testmode(bb.TESTMODE_PATTERN_SWD)
		bb.tx_mode()
	elif args.mode == "off":
		bb.testmode(bb.TESTMODE_OFF)
		bb.rx_mode()

	if args.mode != "off" and args.limit is not None:
		time.sleep(args.limit)
		bb.testmode(bb.TESTMODE_OFF)
		bb.rx_mode()

@subcommand("set device in transmit mode")
def txmode(args, bb):
	bb.tx_mode()

@subcommand("set device in receive mode")
def rxmode(args, bb):
	bb.rx_mode()

@subcommand("get or set device frequency")
@argument('frequency', type=int, help="requested frequency", nargs="?", default=None)
def frequency(args, bb):
	if args.frequency is not None:
		bb.set_frequency(args.frequency)
	else:
		print(bb.get_frequency())

@subcommand("get or set device bitrate")
@argument('bitrate', type=int, help="requested bitrate", nargs="?", default=None)
def bitrate(args, bb):
	if args.bitrate is not None:
		bb.set_bitrate(args.bitrate)
	else:
		print(bb.get_bitrate())

@subcommand("get or set device modulation index")
@argument('modindex', type=int, help="requested modulation index", nargs="?", default=None)
def modindex(args, bb):
	if args.modindex is not None:
		bb.set_modindex(args.modindex)
	else:
		print(bb.get_modindex())

@subcommand("get or set device training sequence")
@argument('length', type=int, help="training sequence length in bytes", nargs="?", default=None)
def training(args, bb):
	if args.length is not None:
		bb.set_training(args.length)
	else:
		print(bb.get_training())

@subcommand("show current configuration")
def config(args, bb):
	frequency = bb.get_frequency()
	modindex  = bb.get_modindex()
	training  = bb.get_training()
	bitrate   = bb.get_bitrate();

	print("Frequency:        {0} Hz".format(frequency))
	print("Modulation Index: {0}".format(modindex))
	print("Bitrate:          {0} bps".format(bitrate))
	print("Training bytes:   {0} bytes".format(training))

@subcommand("show detailed help for subcommand")
@argument('command', help="detailed help command", nargs="?", default=None)
def help(args, parser):
	if args.command is not None:
		subcommands[args.command]["parser"].print_help()
	else:
		parser.print_help()

class SubcommandHelpFormatter(argparse.RawDescriptionHelpFormatter):
	def _format_action(self, action):
		parts = super(argparse.RawDescriptionHelpFormatter, self)._format_action(action)
		if action.nargs == argparse.PARSER:
			parts = "\n".join(parts.split("\n")[1:])
		return parts

desc = """
Main BlueBox satellite ground station control program. %(prog)s is used for
controlling frequency, bitrate, etc. of the device and to transmit and
receive data.

"""

epilog="See '%(prog)s help <command>' for more information on a specific command."

def main():
	parser = argparse.ArgumentParser(description=desc, epilog=epilog, formatter_class=SubcommandHelpFormatter)
	parser.add_argument("-v", "--verbose", action="store_true", help="enable verbose output")
	subparsers = parser.add_subparsers(title="The available subcommands are", metavar="<command>")

	for sub in sorted(subcommands):
		args, kwargs = subcommands[sub]["sub"]
		subparser = subparsers.add_parser(*args, **kwargs)
		subcommands[sub]["parser"] = subparser
		for args, kwargs in subcommands[sub]["args"]:
			arg = args[0] if kwargs.get("nargs", "") == "?" else "<" + args[0] + ">"
			if not args[0].startswith("-"):
				kwargs["metavar"] = kwargs.get("metavar", arg)
			subparser.add_argument(*args, **kwargs)
		subparser.set_defaults(func=subcommands[sub]["func"])

	if len(sys.argv) < 2:
		parser.print_help()
		sys.exit(1)

	if not sys.argv[1] in subcommands:
		print("{0}: '{1}' is not a {0} command. See '{0} --help'.".format(parser.prog, sys.argv[1]))
		sys.exit(1)

	args = parser.parse_args()
	if args.func == help:
		args.func(args, parser)
		sys.exit(0)

	try:
		bb = bluebox.Bluebox()
	except KeyboardInterrupt:
		print()
		sys.exit(0)
	except Exception as e:
		print("Failed to connect to BlueBox: {0}".format(e))
		sys.exit(0)

	if args.verbose:
		print("Found {0} {1} with serial {2} on bus {3}:{4}".format(
		      bb.manufacturer, bb.product, bb.serial, bb.bus, bb.address))

	try:
		args.func(args, bb)
	except Exception as e:
		print("Error: {0}".format(str(e)))
	except KeyboardInterrupt:
		print()
	sys.exit(0)

if __name__ == "__main__":
	main()
