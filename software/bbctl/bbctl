#!/usr/bin/env python2

# Copyright (c) 2012 Jeppe Ledet-Pedersen <jlp@satlab.org>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

from __future__ import print_function

import sys
import time
import os.path
import bluebox

def usage():
	print("usage: {0} command [arguments]".format(os.path.basename(sys.argv[0])))
	sys.exit(0)

def main():
	if len(sys.argv) < 2:
		usage()

	cmd = sys.argv[1]

	try:
		bb = bluebox.Bluebox()
	except Exception as e:
		print("Failed to connect to BlueBox: {0}".format(e))
		sys.exit(0)

	if cmd == "devices":
		print("Found {0} {1} with serial {2} on bus {3}:{4}".format(
			bb.manufacturer, bb.product, bb.serial,
			bb.dev.bus, bb.dev.address))
	
	elif cmd == "bootloader":
		bb.bootloader()

	elif cmd == "version":
		ver = bb.version()
		print(hex(ver))

	elif cmd == "rssi":
		rssi = bb.rssi()
		print("{0} dBm".format(rssi))

	elif cmd == "signal":
		while True:
			try:
				rssi = bb.rssi()
				if rssi < -125:
					rssi = -125
				if rssi > -47:
					rssi = -47
				sys.stdout.write("\r{0} dBm ".format(rssi))
				sys.stdout.flush()
				time.sleep(0.05)
			except:
				sys.exit(0)

	elif cmd == "receive":
		last = time.time()
		while True:
			data = bb.receive()
			if data is None:
				break
			print("Recv ({0}) {1:.2f}s '{2}'".format(len(data), time.time() - last, ''.join(["{0:02x}".format(x) for x in data])))
			last = time.time()

	elif cmd == "transmit":
		if len(sys.argv) > 2:
			bytes = [int(x, 16) for x in sys.argv[2]]
			bb.transmit(bytes)

	elif cmd == "testmode":
		if len(sys.argv) > 2:
			if sys.argv[2] == "carrier":
				bb.testmode(bb.TESTMODE_OFF)
				bb.tx_mode()
			elif sys.argv[2] == "high":
				bb.testmode(bb.TESTMODE_PATTERN_HIGH)
				bb.tx_mode()
			elif sys.argv[2] == "low":
				bb.testmode(bb.TESTMODE_PATTERN_LOW)
				bb.tx_mode()
			elif sys.argv[2] == "pn9":
				bb.testmode(bb.TESTMODE_PATTERN_PN9)
				bb.tx_mode()
			elif sys.argv[2] == "1010":
				bb.testmode(bb.TESTMODE_PATTERN_1010)
				bb.tx_mode()
			elif sys.argv[2] == "syncword":
				bb.testmode(bb.TESTMODE_PATTERN_SWD)
				bb.tx_mode()
			elif sys.argv[2] == "off":
				bb.testmode(bb.TESTMODE_OFF)
				bb.rx_mode()
		else:
			bb.testmode(bb.TESTMODE_OFF)
			bb.rx_mode()

	elif cmd == "tx":
		bb.tx_mode()

	elif cmd == "rx":
		bb.rx_mode()

	elif cmd == "frequency":
		if len(sys.argv) > 2:
			bb.set_frequency(int(sys.argv[2]))
		else:
			print(bb.get_frequency())

	elif cmd == "bitrate":
		if len(sys.argv) > 2:
			bb.set_bitrate(int(sys.argv[2]))
		else:
			print(bb.get_bitrate())

	elif cmd == "modindex":
		if len(sys.argv) > 2:
			bb.set_modindex(int(sys.argv[2]))
		else:
			print(bb.get_modindex())

	else:
		usage()

	sys.exit(0)

if __name__ == "__main__":
	main()
